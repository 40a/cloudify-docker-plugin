##################################################################################
# Cloudify Docker built in types and plugins definitions.
##################################################################################

plugins:
  docker:
    executor: host_agent
    source: https://github.com/cloudify-cosmo/cloudify-docker-plugin/archive/master.zip

node_types:
  docker_container: 
    derived_from: cloudify.nodes.Root
    properties:            
      image:
        description: the image name 
      command: 
        description: the command to start the container
        default: '' 
      exported_ports:
        description: the ports the container exports 
        default: []
      port_bindings: 
        description: port bindings on the host machine 
        default: {}
      volumes: 
        description: volumes bindings 
        default: []
      binds: 
        description: volumes to bind 
        default: {}
      environment: 
        description: environment variables for the container 
        default: {}
    interfaces:
      cloudify.interfaces.lifecycle:
      create:
        implementation: docker.docker_plugin.tasks.pull
        inputs:            
        image_pull:
          repository: { get_property: [ SELF, image]}
      configure:
        implementation: docker.docker_plugin.tasks.configure          
        inputs:            
          container_config:
            command: { get_property: [ SELF, command ]}
            image: { get_property: [ SELF, image]}
            ports: { get_property: [ SELF, exported_ports]}
      start:
        implementation: docker.docker_plugin.tasks.run
          inputs:
            daemon_client: {}
            container_start:
              port_bindings: { get_property: [SELF, port_bindings]}
      stop:
        implementation: docker.docker_plugin.tasks.stop
        inputs:
          daemon_client:  {}
          container_stop: {}
      delete:
        implementation: docker.docker_plugin.tasks.delete
          inputs:
            daemon_client:    {}
            # required in case container to remove is currently running
            container_stop:   {}
            container_remove: {}
